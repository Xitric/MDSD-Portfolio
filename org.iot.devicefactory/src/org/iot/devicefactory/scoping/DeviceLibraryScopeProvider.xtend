/*
 * generated by Xtext 2.20.0
 */
package org.iot.devicefactory.scoping

import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.scoping.IScope
import org.eclipse.xtext.scoping.Scopes
import org.eclipse.xtext.scoping.impl.SimpleScope
import org.iot.devicefactory.common.CommonPackage
import org.iot.devicefactory.deviceLibrary.Board
import org.iot.devicefactory.deviceLibrary.DeviceLibraryPackage.Literals
import org.iot.devicefactory.deviceLibrary.Library
import org.iot.devicefactory.deviceLibrary.SensorDefinition

import static extension org.eclipse.xtext.EcoreUtil2.*
import static extension org.iot.devicefactory.scoping.MultiInheritanceScopingUtil.*
import static extension org.iot.devicefactory.util.CommonUtils.*
import static extension org.iot.devicefactory.util.DeviceLibraryUtils.*

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class DeviceLibraryScopeProvider extends AbstractDeviceLibraryScopeProvider {
	
	override getScope(EObject context, EReference reference) {
		switch reference {
			case Literals.BOARD__PARENTS:
				context.boardParentScope
			case Literals.OVERRIDE_SENSOR_DEFINITION__PARENT:
				context.sensorScope
			case CommonPackage.Literals.REFERENCE__VARIABLE:
				context.referenceVariableScope
			default:
				super.getScope(context, reference)
		}
	}
	
	private def IScope getBoardParentScope(EObject context) {
		val library = context.getContainerOfType(Library)
		Scopes.scopeFor(library.boards.takeWhile[it !== context])
	}
	
	private def IScope getSensorScope(EObject context) {
		val board = context.getContainerOfType(Board)
		if (board === null) {
			return IScope.NULLSCOPE
		}
		
		val parentScopes = board.parents.map[boardSensorScope].flatMap[allElements]
		
		// Remove duplicate names (will only remove simple names, since all
		// qualified names are unique)
		val filteredParentScope = parentScopes.filter[ desc |
			parentScopes.findFirst[name == desc.name].EObjectURI == parentScopes.findLast[name == desc.name].EObjectURI
		]
		
		// If an object can be reached in multiple ways, we only include it
		// once in the resulting scope
		new SimpleScope(filteredParentScope.removeDuplicates)
	}
	
	private def IScope getReferenceVariableScope(EObject context) {
		val expressionScope = context.variables
		if (expressionScope.empty) {
			val sensor = context.getContainerOfType(SensorDefinition)
			Scopes.scopeFor(sensor.internalVariables)
		} else {
			Scopes.scopeFor(expressionScope)
		}
	}
}
