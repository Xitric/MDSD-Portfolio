/*
 * generated by Xtext 2.20.0
 */
package org.iot.devicefactory.formatting2

import org.eclipse.xtext.formatting2.IFormattableDocument
import org.iot.devicefactory.deviceFactory.BaseDevice
import org.iot.devicefactory.deviceFactory.BaseSensor
import org.iot.devicefactory.deviceFactory.Channel
import org.iot.devicefactory.deviceFactory.ChildDevice
import org.iot.devicefactory.deviceFactory.Cloud
import org.iot.devicefactory.deviceFactory.Deployment
import org.iot.devicefactory.deviceFactory.Fog
import org.iot.devicefactory.deviceFactory.Language
import org.iot.devicefactory.deviceFactory.Library
import org.iot.devicefactory.deviceFactory.OverrideSensor
import org.iot.devicefactory.deviceFactory.Sampler
import org.iot.devicefactory.deviceFactory.SensorData
import org.iot.devicefactory.deviceFactory.SensorOut
import org.iot.devicefactory.deviceFactory.Transformation
import org.iot.devicefactory.deviceFactory.TransformationData
import org.iot.devicefactory.deviceFactory.TransformationOut

class DeviceFactoryFormatter extends CommonFormatter {

	def dispatch void format(Deployment deployment, extension IFormattableDocument document) { 
		deployment.libraries.forEach[format]
		deployment.language.format
		deployment.channels.forEach[format]
		deployment.devices.forEach[format]
		deployment.fogs.forEach[format]
		deployment.clouds.forEach[format]
	}
	
	def dispatch void format(Library library, extension IFormattableDocument document) {
		
	}
	
	def dispatch void format(Language language, extension IFormattableDocument document) {
		
	}
	
	def dispatch void format(Channel channel, extension IFormattableDocument document) {
		
	}

	def dispatch void format(BaseDevice baseDevice, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
//		for (sensor : device.sensors) {
//			sensor.format
//		}
	}
	
	def dispatch void format(ChildDevice childDevice, extension IFormattableDocument document) {
		
	}
	
	def dispatch void format(BaseSensor baseSensor, extension IFormattableDocument document) {
		
	}
	
	def dispatch void format(OverrideSensor overrideSensor, extension IFormattableDocument document) {
		
	}
	
	def dispatch void format(SensorData sensorData, extension IFormattableDocument document) {
		
	}
	
	def dispatch void format(SensorOut sensorDataOut, extension IFormattableDocument document) {
		
	}
	
	def dispatch void format(Sampler sampler, extension IFormattableDocument document) {
		
	}
	
	def dispatch void format(Fog fog, extension IFormattableDocument document) {
		
	}
	
	def dispatch void format(Cloud cloud, extension IFormattableDocument document) {
		
	}
	
	def dispatch void format(Transformation transformation, extension IFormattableDocument document) {
		
	}
	
	def dispatch void format(TransformationData transformationData, extension IFormattableDocument document) {
		
	}
	
	def dispatch void format(TransformationOut transformationOut, extension IFormattableDocument document) {
		
	}
}
