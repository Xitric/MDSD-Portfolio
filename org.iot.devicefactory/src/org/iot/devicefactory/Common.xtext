grammar org.iot.devicefactory.Common with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate common "http://www.iot.org/devicefactory/Common"

// Inlined rules due to Xtext bug:
// https://bugs.eclipse.org/bugs/show_bug.cgi?id=485118
Pipeline:
	(
		{Filter} 'filter' '[' expression=Expression ']' |
		{Map} 'map' '[' expression=Expression '=>' output=VariableDeclaration ']' |
		{Window} 'window' '[' width=INT ']' '.' execute=ExecutePipeline
	)
	(next=NextPipeline)?
;

NextPipeline returns Pipeline:
	BEGIN '.' Pipeline END | '.' Pipeline
;

// This is how I would have liked to represent it
//Pipeline:
//	(Filter | Map | Window) ('.' next=Pipeline)?
//;
//
//Filter:
//	'filter' '[' expression=Expression ']'
//;
//
//Map:
//	'map' '[' expression=Expression '=>' output=VariableDeclaration ']'
//;
//
//Window:
//	'window' '[' width=INT ']' '.' execute=ExecutePipeline
//;

// TODO: Can maybe extract to externals
ExecutePipeline:
    {Mean} 'mean' |
    {Median} 'median' |
    {Mode} 'mode' |
    {Var} 'var' |
    {StDev} 'stdev' |
    {Min} 'min' |
    {Max} 'max'
;

// The expression rules are loose allowing for meaningless expressions to be
// formed. Well-typedness will be ensured using validators
Expression:
	Conditional
;

Conditional returns Expression:
	Or ({Conditional.condition=current} '?' first=Conditional ':' second=Conditional)?
;

// Implemented in a right-associative way just as an example - associativity
// does not matter for && and ||
Or returns Expression:
	And ({Or.left=current} '||' right=Or)?
;

And returns Expression:
	Equality ({And.left=current} '&&' right=And)?
;

Equality returns Expression:
	Comparison ({Equal.left=current} '==' right=Comparison | {Unequal.left = current} '!=' right=Comparison)*
;

Comparison returns Expression:
	SubAdd ({LessThan.left=current} '<' right=SubAdd | {LessThanEqual.left=current} '<=' right=SubAdd | {GreaterThan.left=current} '>' right=SubAdd | {GreaterThanEqual.left=current} '>=' right=SubAdd)*
;

SubAdd returns Expression:
	MulDiv ({Add.left=current} '+' right=MulDiv | {Sub.left=current} '-' right=MulDiv)*
;

MulDiv returns Expression:
	Negation ({Mul.left=current} '*' right=Negation | {Div.left=current} '/' right=Negation | {Rem.left=current} '%' right=Negation)*
;

Negation returns Expression:
    {Negation} '-' value=Exponent | Exponent
;

// Exponentiation is right-associative!
// That is why the rule refers to itself (or its parent) on the right of the operator
Exponent returns Expression:
    Not ({Exponent.base=current} '**' power=Negation)?
;

Not returns Expression:
	{Not} '!' value=Primary | Primary
;

Primary returns Expression:
	Parentheses | NumberLiteral | BooleanLiteral | Reference | StringLiteral
;

Parentheses returns Expression:
	'(' Expression ({Tuple.values += current} (',' values += Expression)+)? ')'
;

Reference:
	variable=[Variable]
;

VariableDeclaration:
	Variable | Variables
;

Variable:
	name=ID
;

// Requires at least one comma
Variables:
	'(' vars+=Variable (',' vars+=Variable)+ ')'
;

QualifiedName:
	ID ('.' ID)*
;

QualifiedNameWithWildcard:
    QualifiedName '.*'?
;

StringLiteral:
	value=STRING
;

NumberLiteral:
	value=NUMBER
;

BooleanLiteral:
	value=BOOLEAN
;

terminal BEGIN: 'synthetic:BEGIN';
terminal END: 'synthetic:END';

@Override 
terminal INT returns ecore::EInt:
	'0' | ('1'..'9')('0'..'9')*
;
terminal HEX:
	'0x' ('0'..'9' | 'a'..'f' | 'A'..'F')+
;
terminal DBL returns ecore::EDouble:
	INT? '.'('0'..'9')+
;
terminal SCI returns ecore::EDouble:
	(INT | DBL) ('e' | 'E') '-'? INT
;
terminal BOOLEAN returns ecore::EBoolean:
	'true' | 'false'
;
INTEGER hidden():
	INT | HEX
;
NUMBER hidden():
	INTEGER | DBL | SCI
;
