/*
 * generated by Xtext 2.20.0
 */
package org.iot.devicefactory.validation

import com.google.inject.Inject
import org.eclipse.xtext.naming.IQualifiedNameConverter
import org.eclipse.xtext.validation.Check
import org.eclipse.xtext.validation.CheckType
import org.iot.devicefactory.deviceFactory.BaseSensor
import org.iot.devicefactory.deviceFactory.Channel
import org.iot.devicefactory.deviceFactory.ChildDevice
import org.iot.devicefactory.deviceFactory.Data
import org.iot.devicefactory.deviceFactory.Deployment
import org.iot.devicefactory.deviceFactory.Device
import org.iot.devicefactory.deviceFactory.DeviceFactoryPackage.Literals
import org.iot.devicefactory.deviceFactory.Language
import org.iot.devicefactory.deviceFactory.Library
import org.iot.devicefactory.deviceFactory.Out
import org.iot.devicefactory.deviceFactory.OverrideSensor
import org.iot.devicefactory.deviceFactory.Sensor
import org.iot.devicefactory.deviceFactory.Transformation
import org.iot.devicefactory.generator.DeviceFactoryGenerator
import org.iot.devicefactory.typing.DeviceFactoryTypeChecker
import org.iot.devicefactory.typing.ExpressionTypeChecker
import org.iot.devicefactory.util.IndexUtils

import static org.iot.devicefactory.validation.DeviceFactoryIssueCodes.*

import static extension org.eclipse.xtext.EcoreUtil2.*
import static extension org.iot.devicefactory.util.CommonUtils.*
import static extension org.iot.devicefactory.util.DeviceFactoryUtils.*
import static extension org.iot.devicefactory.util.QualifiedNameUtils.*

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class DeviceFactoryValidator extends AbstractDeviceFactoryValidator {
	
	@Inject DeviceFactoryGenerator factoryGenerator
	@Inject extension ExpressionTypeChecker typeChecker
	@Inject extension IndexUtils
	@Inject extension IQualifiedNameConverter
	@Inject extension DeviceFactoryTypeChecker
	
	@Check(CheckType.NORMAL)
	def validateDeployment(Deployment deployment) {
		if (deployment.channels.empty) {
			error("There must be at least one channel", Literals.DEPLOYMENT__CHANNELS, MISSING_CHANNEL)
		}
		
		if (deployment.devices.empty) {
			error("There must be at least one device", Literals.DEPLOYMENT__DEVICES, MISSING_DEVICE)
		}
		
		if (deployment.fogs.size > 1) {
			error("There can be at most one fog", Literals.DEPLOYMENT__FOGS, AMBIGUOUS_FOG)
		}
		
		if (deployment.clouds.size == 0) {
			error("There must be a cloud", Literals.DEPLOYMENT__FOGS, MISSING_CLOUD)
		}
		
		if (deployment.clouds.size > 1) {
			error("There can be at most one cloud", Literals.DEPLOYMENT__FOGS, AMBIGUOUS_CLOUD)
		}
	}
	
	@Check(CheckType.NORMAL)
	def validateImport(Library library) {
		val visibleBoards = library.visibleBoards
		val importQualifiedName = library.importedNamespace.toQualifiedName
		
		if (! visibleBoards.exists[importQualifiedName.matches(qualifiedName)]) {
			error(
				'''No resource found with qualified name «library.importedNamespace»''',
				Literals.LIBRARY__IMPORTED_NAMESPACE,
				SUPERFLUOUS_LIBRARY
			)
		} else if (importQualifiedName.segmentCount == 1) {
			warning(
				'''Unnecessary import of library «library.importedNamespace» has no effect''',
				Literals.LIBRARY__IMPORTED_NAMESPACE,
				SUPERFLUOUS_LIBRARY
			)
		}
	}
	
	@Check
	def validateLanguage(Language language) {
		if (! factoryGenerator.supportedLanguages.contains(language.name)) {
			error('''Unsupported language «language.name»''', Literals.LANGUAGE__NAME, UNSUPPORTED_LANGUAGE)
		}
	}
	
	@Check
	def validateOutTypes(Out output) {
		val expectedType = output.getContainerOfType(Data).typeOf(typeChecker)
		val actualType = output.typeOf(typeChecker)
		
		if (actualType != expectedType) {
			error(
				'''Incorrect output type from data pipeline. Expected «expectedType», got «actualType»''',
				Literals.OUT__PIPELINE,
				INCORRECT_OUT_TYPE
			)
		}
	}
	
	@Check
	def validateChildSensorsOverride(BaseSensor sensor) {
		val device = sensor.getContainerOfType(ChildDevice)
		if (device === null) {
			return
		}
		
		if (device.parent.deviceHierarchy.exists[sensors.exists[name == sensor.name]]) {
			error('''Redeclared sensor «sensor.name» must override inherited definition from parent''',
				Literals.BASE_SENSOR__DEFINITION, MISSING_OVERRIDE
			)
		}
	}
	
	@Check
	def validateChannel(Channel channel) {
		val deployment = channel.getContainerOfType(Deployment)
		if (deployment.channels.takeWhile[it !== channel].exists[name == channel.name]) {
			error('''Duplicate channel «channel.name»''', Literals.CHANNEL__NAME, DUPLICATE_CHANNEL)
		}
	}
	
	@Check
	def validateDevice(Device device) {
		val deployment = device.getContainerOfType(Deployment)
		if (deployment.devices.takeWhile[it !== device].exists[name == device.name]) {
			error('''Duplicate device «device.name»''', Literals.DEVICE__NAME, DUPLICATE_DEVICE)
		}
	}
	
	@Check
	def validateSensor(Sensor sensor) {
		val device = sensor.getContainerOfType(Device)
		
		if (device.sensors.takeWhile[it !== sensor].exists[name === sensor.name]) {
			val feature = switch sensor {
				BaseSensor: Literals.BASE_SENSOR__DEFINITION
				OverrideSensor: Literals.OVERRIDE_SENSOR__PARENT
			}
			
			error('''Duplicate sensor definition «sensor.name» in same device''', feature, DUPLICATE_SENSOR)
		}
	}
	
	@Check
	def validateData(Data data) {
		val sensor = data.getContainerOfType(Sensor)
		if (sensor.datas.takeWhile[it !== data].exists[name == data.name]) {
			error('''Duplicate data «data.name» in same sensor''', Literals.DATA__NAME, DUPLICATE_DATA)
		}
	}
	
	@Check
	def validateTransformationVariables(Transformation transformation) {
		if (transformation.provider !== null) {
			val expectedCount = transformation.provider.typeOf(typeChecker).valueCount
			val actualCount = transformation.variables.variableCount
			
			if (expectedCount !== actualCount) {
				error(
					'''Expected variable declaration to contain «expectedCount» variable«IF expectedCount > 1»s«ENDIF», got «actualCount»''',
					Literals.TRANSFORMATION__VARIABLES,
					INCORRECT_VARIABLE_DECLARATION
				)
			}
		}
	}
}
