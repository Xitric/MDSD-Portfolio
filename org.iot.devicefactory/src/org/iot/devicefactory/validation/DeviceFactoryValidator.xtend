/*
 * generated by Xtext 2.20.0
 */
package org.iot.devicefactory.validation

import com.google.inject.Inject
import java.util.HashSet
import org.eclipse.xtext.validation.Check
import org.iot.devicefactory.deviceFactory.ChildDevice
import org.iot.devicefactory.deviceFactory.Device
import org.iot.devicefactory.deviceFactory.DeviceFactoryPackage.Literals
import org.iot.devicefactory.deviceFactory.Language
import org.iot.devicefactory.generator.DeviceFactoryGenerator

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class DeviceFactoryValidator extends AbstractDeviceFactoryValidator {
	
	public static val INHERITANCE_CYCLE = "org.iot.devicefactory.deviceFactory.INHERITANCE_CYCLE"
	public static val UNSUPPORTED_LANGUAGE = "org.iot.devicefactory.deviceFactory.UNSUPPORTED_LANGUAGE"
	
	@Inject DeviceFactoryGenerator factoryGenerator
	
	@Check
	def validateNoInheritanceCycles(ChildDevice device) {
		val known = new HashSet<Device>()
		var Device current = device
		while (current !== null) {
			if (known.contains(current)) {
				error("Inheritance cycles are not allowed", Literals.CHILD_DEVICE__PARENT, INHERITANCE_CYCLE)
				return
			}
			
			known.add(current)
			current = switch current {
				ChildDevice: current.parent
				default: null
			}
		}
	}
	
	@Check
	def validateLanguage(Language language) {
		if (! factoryGenerator.supportedLanguages.contains(language.name)) {
			error('''Unsupported language «language.name»''', Literals.LANGUAGE__NAME, UNSUPPORTED_LANGUAGE)
		}
	}
}
